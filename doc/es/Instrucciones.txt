Paquetes entregados
===================
activae.tar.gz		Activae			--> se debe colocar en /opt/activae (modificable en deployment/config.py)
pruebas.tar.gz		Datos de prueba		--> se detalla más adelante
activae_src.tar.gz	Caché del instalador	--> sus datos se deben ubicar en /opt


Entorno de prueba
=================
Máquina virtual con una instalación mínima de Ubuntu 10.04 32bits [1],
1GB de RAM, 8GB de HDD. Esta máquina se usará para todos los
servicios: Activae, cola de transcodificación y API de búsquedas.

1: http://ubuntu.grn.cat/ubuntu-releases/lucid/ubuntu-10.04-server-i386.iso

Tras instalar el sistema básico, se añaden los siguientes paquetes
necesarios para construir el sistema.

# apt-get install gcc g++ subversion patch wget libxml2-dev mysql-server rrdtool libmysqlclient-dev libjpeg62-dev zlib1g-dev autoconf unzip python-pycurl pkg-config gettext


Listado de puertos
==================

Puerto	Descripción
------------------------------------------------------------------------
80	Frontend: Balanceador principal para los distintos servidores
	web.
9091	Web: Puerto en el que es accesible la interfaz web en toda
	máquina que corra el servidor de Activae. Estos son los
	puertos y máquinas balanceados por el Frontend.
8000	CTK: Puerto utilizado por la plataforma para transmisión de datos
	asíncronamente.
8001	Balanceador de la cola de transcodificación, que es un servicio
	XMLRPC. La IP y puerto de dicho servicio se configura mediante
	las constantes QUEUE_SERVER y QUEUE_PORT.
8002	Puerto en el que cada máquina exporta la API de búsquedas
	mediante XMLRPC. Constante LOOKUP_PORT.
8003	Puerto en el que cada máquina exporta su cola de
	transcodificación mediante XMLRPC. Constante PORT.
33060	DBSlayer: Balanceo asíncrono de MySQL. Parámetro DB_HOST.

Por tanto, para ejecutar satisfactoriamente la plataforma es preciso
disponer de acceso a dichos puertos. Los parámetros se pueden
modificar en config.py, en cuyo caso será preciso reconfigurar los
balanceadores pertinentes mediante la edición de los ficheros:

  frontend/cherokee.conf.orig
  src/queue/cherokee.conf
  dabase/cherokee.conf


Arquitectura
============
                  -->  Back-end 1  -----
                 |     [Port 9091]      |
                 |                      |                    -> MySQL 1
Front-end -------|-->  Back-end 2  -----|-->   DBSlayer  ---|
[Port 80]        |     [Server2: 9091]  |    [Port 33060]    -> MySQL 2
                 |                      |
                  -->  Back-end 3  -----
                       [Server3: 9091]


                  -->  Transcode-engine 1
                 |     [Port 8003]
                 |
Queue-balancer --|-->  Transcode-engine 2
[Port 8001]      |     [Port 8003]
                 |
                  -->  Transcode-engine 3
                       [Port 8003]

Dependencias
============
Requisitos: crear usuario y grupo 'activae'
En nuestro ejemplo, instalamos todo en opt/activae (ya sea
descomprimiendo el paquete o copiando ahí los archivos de la forja:

# svn checkout https://svn.forge.morfeo-project.org/activae/dam activae

Así, en /opt/activae estarán almacenados todos los archivos necesarios
para realizar la instalación.

Se pueden reconfigurar las rutas de instalacción en
/opt/activae/deployment/config.py

Opcionalmente se pueden personalizar el resto de rutas en
/opt/activae/src/config.py, pero esto no es necesario.

El instalador automáticamente detecta y descarga las dependencias que
no estén en su paquete. En el paquete proporcionado activae_src.tar.gz
están todas, por lo que no debería necesitar descagar paquetes.

Tras ejecutar el instalador y descargar dependencias, estas se quedan
cacheadas para futuras instalaciones.

El instalador utiliza por defecto las rutas especificadas en
activae/deployment/config.py, por lo que si se desea especificar el
destino de los archivos bastará con editar dicho fichero. Por defecto
las descargas se realizarán en /opt/activae_src, y la instalación se
hará en /opt/activae.

Para lanzar el instalador, bastará con ejecutar lo siguiente:

# cd /opt/activae/deployment
# make install

El propio instalador pedirá que se creen los directorios y ficheros
necesarios con los permisos adecuados.

Base de datos
=============
La creación de la base de datos y asignación de permisos se haría de
la siguiente manera (se asume que se dispone de un usuario y
contraseña con privilegios para crear bases de datos MySQL):

# mysql
[...]
mysql>	CREATE DATABASE activae;
	GRANT ALL PRIVILEGES ON activae.* TO activae@localhost IDENTIFIED BY 'activae';
	GRANT ALL PRIVILEGES ON activae.* TO activae@localhost.localdomain IDENTIFIED BY 'activae';
	FLUSH PRIVILEGES;
	quit;

# mysql activae < activae.sql

Se proporcionan dos bases de datos:
activae.sql --> Base de datos mínima.
                Tiene USUARIO: 'admin', CONTRASEÑA: 'admin'

sql.sql     --> Base de datos de prueba. Se habla de ella más adelante.
                Tiene más usuarios creados: admin, consumer, creator, editor,
                publisher
                Todos ellos tienen la siguiente contraseña: password

Datos de prueba
===============
La base de datos sql.sql está poblada con los datos correspondientes a
cientos de archivos entre imágenes y videos.

Los archivos de medios se guardan por defecto en
src/static/private/assets/ así que si se usa sql.sql hay que meter ahí
los videos e imágenes descargados al hacer:

cd activae/qa/ ; make

La descarga se realiza en el directorio de la caché del instalador
(/opt/activae_src), bajo ./video y ./images, y ocupa aproximadamente
3.5GB

También se proporcionan los thumbnails correspondientes (a ser
alojados bajo src/static/private/thumbs/ (que se habrían creado si se
hubiesen insertado los datos a través de la aplicación en lugar de
mediante un volcado directo).  El fichero que se proporciona ya lleva
la jerarquía de directorios definida, así que basta con copiarlo sobre
el directorio de 'activae' para que se situén adecuadamanete.


Componentes de la aplicación
============================
Para lanzar la plataforma es preciso que todos los componentes
deseados estén operativos. Además, debe existir un usuario 'activae' y
grupo 'activae' para correr los servicio.

Estos componentes serán, como mínimo, el frontend o balanceador
principal de la aplicación y el balanceador de la base de datos. Se
lanzan respectivamente con:

$ sudo ./activae.py --frontend
$ ./activae.py --database

Nota: Es necesario lanzar el frontend con un usuario que tenga acceso
al puerto 80, aunque posteriormente la instancia balanceadora de
Cherokee hará el cambio efectivo al usuario 'activae' para que no sea
necesario correr un servicio web como superusuario.

Nótese que si no se configura dicho usuario, entonces sí que se
ejecutarán los servidores web como usuario privilegiado, lo cual es un
riesgo de seguridad. A este respecto cabe destacar que si se ejecutan
los demás servicios como usuario privilegiado, los posibles ficheros y
directorios que se creen pertenecerán a dicho usuario. Esto implica
que una ejecución posterior sin privilegios podría tener problemas de
acceso a dichos ficheros por permisos insuficientes. Si esto sucede,
se notifica por consola. Además, las instancias web lanzadas por el
frontend siempre son ejecutadas por el usuario 'activae'. Esto es así
por diseño.

Para que Activae sea funcional, también es necesario lanzar la cola de
transcodificación (o de lo contrario no será posible encolar
peticiones para crear versiones en otros formatos de los activos).

$ ./activae.py --queue

(Por defecto, la cola lanza un trabajador en 127.0.0.1, pero se pueden
añadir tantos como se quiera en cualquier otra máquina y será
documentado en detalle).

Por último, en caso de querer que alguna de las máquinas exporte la
API de búsquedas por XMLRPC, se deberá hacer así:

$ ./activae.py --search


